/**
@page sntp_porting Porting Guide
@brief Guide for porting coreSNTP library to a new platform.

A port to a new platform must provide the following components:
1. [Configuration Macros](@ref sntp_porting_config)
2. [Transport Interface](@ref sntp_porting_transport)
3. [Time Function](@ref sntp_porting_time)

@section sntp_porting_config Configuration Macros for Logging
@brief Macros for enabling macros that can be defined through the config header `core_sntp_config.h`, or passed in as compiler options.

@note If a custom configuration header `core_sntp_config.h` is not provided, then the `SNTP_DO_NOT_USE_CUSTOM_CONFIG` macro must be defined.

@see [Configurations](@ref core_sntp_config)

The following logging macros are used throughout the library:
 - @ref LogError
 - @ref LogWarn
 - @ref LogInfo
 - @ref LogDebug

@section sntp_porting_transport UDP Transport Interface
@brief The coreSNTP library exposes a UDP transport interface API that must be implemented
in order to send and receive SNTP packets over the network.

@see [UDP Transport Interface](@ref UdpTransportInterface_t)

@note For security against unwanted server response packets, it is RECOMMENDED that the UDP socket that is used
for implementing the UDP transport interface functions of performing network I/O is kept open ONLY during the 
duration of a request-response SNTP communication cycle instead of keeping the socket always open. One way to
achieve this is to open a new UDP socket before calling @ref Sntp_SendTimeRequest API and closing the socket after
receiving server response (or performing appropriate wait for response) with the @ref Sntp_ReceiveTimeResponse API. 

A port must implement functions corresponding to the following functions pointers:
 - [UDP Transport Send](@ref UdpTransportSendTo_t): A function to send bytes on the network to the time server
 passed to it. It is RECOMMENDED that the function is implemented with non-blocking in behavior, so
 the total block time for send operation can be passed as runtime parameter to @ref Sntp_SendTimeRequest
 API.

 - [UDP Transport Receive](@ref UdpTransportRecvFrom_t): A function to receive bytes over the network from the
 time server passed to it. It is RECOMMENDED that the function is implemented with non-blocking in behavior, so
 the total block time for receive operation can be passed as runtime parameter to @ref Sntp_ReceiveTimeResponse
 API.

The above two functions take in a pointer to a @ref NetworkContext_t, the typename of a
`struct NetworkContext`. The NetworkContext struct must also be defined by the port, and
ought to contain any information necessary to send and receive data with the @ref UdpTransportSendTo_t
and @ref UdpTransportRecvFrom_t implementations, respectively:
@code
// Example definition of NetworkContext
struct NetworkContext {
    // Fields necessary for the transport implementations, e.g. a UDP socket descriptor.
};
@endcode

@section sntp_porting_gettime Get Time Function
@brief The coreSNTP library relies on this function to obtain time from system for the operation of tracking timeout
durations as well as generating time request packet required by the SNTP protocol.

@see @ref SntpGetTime_t

In the scenario that device platform does not have real-world time information (due to device boot-up for example), it is
acceptable for this function to provide the system time information that does not match real-world time, because once a
time information is receiving in SNTP communication with a time server, the system time can be corrected to match real-time.
Refer to the next section on how the interface exposed by coreSNTP library to correct system time.

@section sntp_porting_settime Set Time Function
@brief The coreSNTP library exposes this interface function to notify the device platform about the latest time received
from a time server as well as the clock drift that the library has calculated of the system time from the server time.

@see @ref SntpSetTime_t

Platforms should implement this function to perform clock disciple operation on the system clock, that is appropriate for
the clock accuracy needs of the application.

@section sntp_porting_time Authentication Interface
@brief The coreSNTP library exposes an authentication interface to allow customer-chosen authentication mechanism to be used
in SNTP communication with time server(s) for security. 

@note It is RECOMMENDED to enable authentication in communication with your time server(s) of choice to protect against attacks
that modify or spoof server responses. The SNTPv4 protocol is flexible to be used use with any symmetric-key or asymmetric key
cryptographic algorithm depending on the support provided by time servers of your choice. For an example of using AES-128-CMAC 
as the authentication algorithm, please refer to [coreSNTP demo in FreeRTOS/FreeRTOS repository](https://github.com/FreeRTOS/FreeRTOS/tree/main/FreeRTOS-Plus/Demo/coreSNTP_Windows_Simulator).

@see @ref SntpAuthenticationInterface_t
A port that uses authentication to communicate with time server must implement the following functions pointers exposed by the authentication interface:
 - [Add client authentication code](@ref SntpGenerateAuthCode_t): A function to generate and append authentication data for client to be validated
 by the time server. The authentication data SHOULD be generated with the @ref SNTP_PACKET_BASE_SIZE on the SNTP request packet bytes serialized by the
 coreSNTP library and appended to the same buffer. This function should also indicate the number of authentication bytes appended to the library
 through an output parameter, so that the library knows about the total size of the SNTP packets that will be communicated with the time server
 that supports the chosen authentication.
 
 - [Validate server authentication](@ref SntpValidateServerAuth_t): A function to validate the authentication code in a received SNTP time response from the
 network to confirm that the expected server is the source of the server response and the timestamps in the packet are trustworthy to 
 update system time. This server authentication data is usually validated by checking that the data can be regenerated by the client from
 the first #SNTP_PACKET_BASE_SIZE bytes of the received SNTP packet from the network.

The above two functions take in a pointer to a @ref SntpAuthContext_t, the typename of a `struct SntpAuthContext`. The `SntpAuthContext` struct must 
also be defined by the port, to store necessary information (like a PKCS#11 label representing credential secret) for performing cryptographic generation
and validation operations in the @ref SntpGenerateAuthCode_t and @ref SntpValidateServerAuth_t functions respectively.

*/
